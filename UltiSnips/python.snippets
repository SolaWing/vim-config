snippet docs "docs template" b
""" $1
${2:type arg1: class}
${3:param str foo: foo parameter description}
${4:rtype:class}
"""

endsnippet

snippet l "lambda"
lambda $1: $0
endsnippet

snippet f "quick function" b
def ${1:function}(`!p
if snip.indent:
    snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	${0:${VISUAL:pass}}
endsnippet

snippet cl "short class def" b
class ${1:Name}(${2:object}):
	def __init__(self, ${3:*arg}):
		${0:pass}
endsnippet

snippet cf "class function" b
@classmethod
def ${1:function}(cls${2/.+/, /}${2:arg}):
	${0:${VISUAL:pass}}
endsnippet

snippet deff "quick function" b
def ${1:function}(`!p
if snip.indent:
    snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	${0:${VISUAL:pass}}
endsnippet

snippet fori "for i loop"
for ${1:i} in xrange(${2:10}):
	${0:pass}
endsnippet

snippet fork "for kv loop"
for ${1:k}, ${2:v} in ${3:dict}.iteritems():
	${0:pass}
endsnippet

snippet eli "elif" b
elif ${1:condition}:
	${0:pass}
endsnippet

snippet imp "import" b
import ${1:re}
endsnippet

snippet from "from . import *" b
from ${1:.} import ${2:*}
endsnippet

snippet wi "with clause" b
with ${1:open($2)} ${3/.+/as/} ${3:f}:
	$0
endsnippet

# jedi hint
snippet hint "type hint"
# type: $1
endsnippet

snippet h "type hint"
# type: $1
endsnippet

snippet functionHint "function hint" b
# type: ($1) -> ${2:None}
endsnippet

