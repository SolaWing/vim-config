snippet param "param doc" b
:param ${1:str} ${2:foo}: $0
endsnippet

snippet rtype "rtype doc" b
:rtype: ${0:str}
endsnippet

snippet docs "docs template" b
""" $1
${2:type arg1: class}
${3:param str foo: foo parameter description}
${4:rtype:class}
"""

endsnippet

snippet l "lambda"
lambda $1: $0
endsnippet

snippet f "quick function" b
def ${1:function}($2):
	${0:${VISUAL:pass}}
endsnippet

snippet m "instance method" b
def ${1:method}(self$2):
	${0:${VISUAL:pass}}
endsnippet

snippet af "async def" b
async def ${1:func}($2):
	${0:${VISUAL:pass}}
endsnippet

snippet cl "short class def" b
class ${1:Name}(${2:object}):
	def __init__(self, ${3:*arg}):
		${0:pass}
endsnippet

snippet cf "class function" b
@classmethod
def ${1:function}(cls${2/.+/, /}${2:arg}):
	${0:${VISUAL:pass}}
endsnippet

snippet sf "static method" b
@staticmethod
def ${1:function}($2):
	${0:${VISUAL:pass}}
endsnippet

snippet deff "quick function" b
def ${1:function}(`!p
if snip.indent:
    snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	${0:${VISUAL:pass}}
endsnippet

snippet fori "for i loop"
for ${1:i} in range(${2:10}):
	${0:pass}
endsnippet

snippet fork "for kv loop"
for ${1:k}, ${2:v} in ${3:dict}.items():
	${0:pass}
endsnippet

snippet wh "while statement" b
while ${1:True}:
	$0
endsnippet

snippet [ "list comprehension"
[${4:$2} for ${2:i} in ${1:items}$3
endsnippet

snippet ( "generotor comprehension" i
(${4:$2} for ${2:i} in ${1:items}$3
endsnippet

snippet { "dict comprehension"
{${4:$2} for ${2:i} in ${1:items}$3
endsnippet

snippet eli "elif" b
elif ${1:condition}:
	${0:pass}
endsnippet

snippet imp "import" b
import ${1:re}
endsnippet

snippet from "from . import *" b
from ${1:.} import ${2:*}
endsnippet

snippet wi "with clause" b
with ${1:open($2)} ${3/.+/as/} ${3:f}:
	$0
endsnippet

# jedi hint
snippet hint "type hint"
# type: $1
endsnippet

snippet h "type hint"
# type: $1
endsnippet

snippet functionHint "function hint" b
# type: ($1) -> ${2:None}
endsnippet

snippet noqa "flake8 error ignore"
# noqa
endsnippet

snippet ifmain "ifmain declare" b
def main():
	${0:pass}

if __name__ == "__main__":
	main()
endsnippet

snippet except "one more except case" b
except ${1:Exception} as e:
	pass
endsnippet
