
priority 0

snippet /** "doc one line comment" b
/** $1 */
endsnippet

snippet /* "doc comment" b
/** $1
 *
 * $2
 */
endsnippet

snippet fixme "fixme" b
// FIXME: 
endsnippet

snippet v "var declare"
var ${1:name} = ${2:nil}
endsnippet

snippet l "let declare"
let ${1:name} = ${2:nil}
endsnippet

snippet f "func def"
func ${1:name}($2)${3/^.+$/ -> /}$3 {
	$0
}
endsnippet

snippet cl "closure define"
{ ($1)${2/.+/ -> /}${2:Void} in 
	$0
}
endsnippet

snippet t "type of"
type(of: ${VISUAL}$0)
endsnippet

snippet wh "while" b
while ${1:true} {
	$0
}
endsnippet

snippet repeat "repeat while" b
repeat {
	$0
} while ${1:false}
endsnippet

snippet for "for in" b
for ${1:i} in ${2:0..<${3:10}} {
	$0
}
endsnippet

snippet guard "guard statement" b
guard $1 else { $0 }
endsnippet

snippet mark "xcode mark" b
// MARK: $0
endsnippet

snippet selector "#selector" 
#selector($0)
endsnippet

snippet keyPath "#keyPath"
#keyPath($0)
endsnippet

snippet #if "#if declare" b
#if ${1:DEBUG}
	$0
#endif
endsnippet

snippet sw "switch statement" b
switch ${1:v} {
	case ${2:pattern}:
		$0
	default: ;
}
endsnippet

snippet protocol "protocol declare"
protocol ${1:Name} {
	$0
}
endsnippet

snippet class "class declare"
class ${1:Name} {
	$0
}
endsnippet

snippet extension "extension declare"
extension ${1:Name} {
	$0
}
endsnippet


snippet swiftlint "swiftlint disable" b
// swiftlint:${1:disable} ${2:identifier_name}
endsnippet
