
priority 0

snippet /** "doc one line comment" b
/** $1 */
endsnippet

snippet /* "doc comment" b
/** $1
 *
 * $2
 */
endsnippet

snippet fixme "fixme" b
// FIXME: 
endsnippet

snippet todo "todo" b
// TODO: 
endsnippet

snippet v "var declare"
var ${1:name} = ${2:nil}
endsnippet

snippet l "let declare"
let ${1:name} = ${2:nil}
endsnippet

snippet f "func def"
func ${1:name}($2)${3/ .*/ ->/}${3} {
	$0
}
endsnippet

snippet cl "closure define"
{ ($1)${2/.+/ -> /}${2:Void} in 
	$0
}
endsnippet

snippet t "type of"
type(of: ${VISUAL}$0)
endsnippet

snippet wh "while" b
while ${1:true} {
	$0
}
endsnippet

snippet repeat "repeat while" b
repeat {
	$0
} while ${1:false}
endsnippet
snippet dowhile "do while syntax" b
repeat {
	$0
} while ${1:false}
endsnippet

snippet for "for in" b
for ${3:i} in ${1:0..<${2:10}} {
	$0
}
endsnippet

snippet do "do catch block" b
do {
	$0
} catch {

}
endsnippet

snippet guard "guard statement" b
guard ${1:let ${2:self} = ${3:$2}} else { return$0 }
endsnippet

snippet mark "xcode mark" b
// MARK: $0
endsnippet

snippet sel "#selector" w
#selector($0)
endsnippet

snippet keyPath "#keyPath"
#keyPath($0)
endsnippet

snippet #if "#if declare" b
#if ${1:DEBUG}
	$0
#endif
endsnippet

snippet switch "switch statement" b
switch ${1:v} {
case ${2:pattern}:
	$0
default: break
}
endsnippet

snippet protocol "protocol declare"
protocol ${1:Name} {
	$0
}
endsnippet

snippet class "class declare"
class ${1:Name} {
	$0
}
endsnippet

snippet enum "enum declare"
enum ${1:Name} {
case $0
}
endsnippet

snippet extension "extension declare"
extension ${1:Name} {
	$0
}
endsnippet

snippet alias "typealias" b
typealias $1 = ${2:@convention(c) }
endsnippet


snippet swiftlint "swiftlint toggle rule" b
// swiftlint:disable ${1:all}
${VISUAL}
// swiftlint:enable $1
endsnippet

snippet swiftlint_this "swiftlint disable current line"
// swiftlint:disable:this all
endsnippet
snippet swiftlint_next "swiftlint disable next line"
// swiftlint:disable:next all
endsnippet

snippet unimplemented "assert unimplemented" b
assertionFailure("${1:unimplemented code!!}")
endsnippet

snippet deprecated "deprecated declare" b
@available(*, deprecated${2:, message: "${1:No longer supported.}"})
endsnippet
