# clearsnippets impl

snippet pln "print line" b
println!("$1"${1/[^{]*(\{\})?.*/(?1:, :\);)/);}$2${1/[^{]*(\{\})?.*/(?1:\);)/}
endsnippet

snippet macro "macro_rules!" b
macro_rules! ${1:name} {
	(${2:matcher}) => {
		${3}
	}
}
endsnippet

snippet test "a test func" b
#[test]
fn ${1:name}() {
	$0
}
endsnippet

snippet trait "a trait" b
trait ${1:name} {
	$0
}
endsnippet

snippet match "match statement" b
match ${1:x} {
	$2 => $3,
}
endsnippet

snippet impl "implementation" b
impl$1 ${2:Trait}${2/.+/ for /}${3:Type} {
	$0
}
endsnippet

snippet impl_deref "implementation of deref" b
impl$1 Deref for ${2:type}$1 {
	type Target = ${3:target};

	fn deref(&self) -> & $3{
		& ${4:self.${5:path}}
	}
}

${6:impl$1 DerefMut for $2$1 {
	fn deref_mut(&mut self) -> &mut $3 {
		&mut $4
	}
}}
endsnippet

snippet impl_sync "impl sync/send" b
unsafe impl$1 Send for $2 {}
unsafe impl$1 Sync for $2 {}
endsnippet

snippet unimplemented "unimplemented!();" b
unimplemented!();
endsnippet

snippet unreachable "unreachable!();"
unreachable!($0)
endsnippet

snippet wh "while" b
while $1 {
	$0
}
endsnippet

snippet f "fn define" b
fn ${1:name}($2) {
	$0
}
endsnippet
