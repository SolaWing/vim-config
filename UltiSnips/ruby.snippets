snippet #! "#! header " b
#!/usr/bin/env ruby

$0
endsnippet

snippet seperator "seperator description" b
########## $0
endsnippet

snippet --- "seperator description" b
########## $0
endsnippet

snippet fixme "fixme" b
# FIXME: $0
endsnippet

snippet r "require" b
require '$0'
endsnippet

snippet if "if statement"
if $1
	$0
end
endsnippet

snippet ifelse "if else"
if $1
	$2
else
	$0
end
endsnippet

# ruby uggly elseif statement
snippet elseif "else if statement"
elsif $1
	$0
endsnippet

snippet unless "unless statement"
unless $1
	$0
end
endsnippet

snippet case "case statement"
case $1
when $2 then $3
else $0
end
endsnippet

snippet for "for loop"
for ${1:i} in ${2:0...9} do
	$0
end
endsnippet

snippet do "do end block"
do
	$0
end
endsnippet

snippet do/ "do |param| end block"
do |${1:v}|
	$0
end
endsnippet

snippet & "&method(:$1)" i
&method(:$0)
endsnippet

snippet { "{} block"
{ |${1:v}| $0 
endsnippet

snippet proc "proc"
proc do
	$0
end
endsnippet
snippet proc/ "proc with param"
proc do |${1:v}|
	$0
end
endsnippet

snippet l "lambda"
lambda do
	$0
end
endsnippet
snippet l/ "lambda with param"
lambda do |${1:v}|
	$0
end
endsnippet

snippet > "one line lambda"
->($1) { $0 }
endsnippet

snippet ar "attr_reader" b
attr_reader
endsnippet

snippet a "attr_accessor" b
attr_accessor
endsnippet

snippet ad "attr_accessor with default" b
def $1
	@$1 ||= $2
end
attr_writer :$1
endsnippet

snippet b "breakpoint" b
binding.pry
endsnippet

snippet << "<< here doc"
<<~${1:EOF}
	$0
$1
endsnippet

snippet rubocop "disable rubocop rules" b
# rubocop:disable ${1:all}
$0${VISUAL}
# rubocop:enable $1
endsnippet

snippet rubocop-this "disable rubocop rules"
# rubocop:disable ${1:all}
endsnippet

########## functional ##########

######################################## rspec
snippet describe "describe a spec" b
RSpec.describe $1 do
	$0
end
endsnippet

snippet it "it example" b
it '$1' do
	$0
end
endsnippet

snippet expect "expect assert" b
expect($1).to ${2:eq} $3
endsnippet

snippet context "context group" b
context '$1' do
	$0
end
endsnippet

######################################## solargraph
snippet ## "document template" b
# ${1:description}
#
# @return [${2:String}]
endsnippet

snippet sg-ignore "sg type report ignore" b
@sg-ignore
endsnippet

snippet param "param document"
@param ${1:name} [${2:String}]$0
endsnippet

snippet yieldparam "yield param"
@yieldparam ${1:name} [${2:String}]$0
endsnippet

snippet option "option document"
@option opts [${2:String}] ${1::name} (${3:nil}) $0
endsnippet

snippet attr_doc "attribute document"
# @!attribute [rw] ${1:name}
#   @return [${2:String}] ${3:desc}
endsnippet

snippet method_doc "method annotation" b
# @!method $1
#  @return [$0]
endsnippet

snippet override_doc "override annotation" b
# @!override $1
#  @return [$0]
endsnippet
snippet overload "overload annotation" b
@overload $1
	@return [$0]
endsnippet

snippet hint "type hint for following var" b
# @type [${1:String}]
endsnippet

snippet parse "parse directive" b
# @!parse
#  $0
endsnippet

snippet domain "domain modify" b
# @!domain [${1:Object}]
endsnippet

snippet nocov "simplecov: no cov hint" b
# :nocov:
${VISUAL}$0
# :nocov:
endsnippet

snippet class_self "singleton method define" b
class << self
	$0
end
endsnippet

snippet structkw "simple struct declare" b
class ${1:StructName}
	attr_accessor $2
	def initialize(**options)
		options.each do |k, v|
			instance_variable_set("@#{k}", v)
		end
	end
end
endsnippet

snippet struct "simple struct declare" b
class ${1:StructName}
	attr_accessor $2

	def initialize(*args)`!p
snip.shift(2)
names = [n.strip(" :") for n in t[2].split(",")]
for i, n in enumerate(names):
  snip += "@{} = args[{}]".format(n, i)
`
	end
end
endsnippet

########## Sorbet ##########
snippet # "file header" b
# typed: true
# frozen_string_literal: true

endsnippet

snippet et "extend T::Sig" b
extend T::Sig
endsnippet

snippet s "sig annotation" b
sig { ${1:params($2).}returns(${3:T.untyped}) }
endsnippet

snippet t "T.untyped"
T.untyped
endsnippet

########## Misc ##########
snippet do-while "a do while block"
loop do
	$0
	break unless $1
end
endsnippet

snippet catch "catch throw label" b
catch :${1:done} do
	$0
end
endsnippet

snippet begin "a new begin block"
begin
	$0
end
endsnippet

snippet try "a begin rescue block"
begin
	$0
rescue ${1:TYPE} => ${2:e}
end
endsnippet

snippet help_desc "generate help desc" b
if ARGV.empty? or ARGV.any?(&['-h', '--help', 'help'].method(:include?))
	print <<~EOF
	  usage:
	    #{$0} swiftfile[,swiftfile]*
	    #{$0} -f swiftfilelist
	EOF
	exit 0
end
endsnippet

snippet monkey_patch "a monkey_patch method template" b
${1/[?!]?$//}_method = instance_method(:$1)
define_method(:$1) do |${2:*args}|
	$0${1/[?!]?$//}_method.bind(self).call(*args)
end
endsnippet

snippet autoload "auto_load script" b
autoload :$1, File.expand_path('${2:${1/.*/\L$0\E/}}.rb', __dir__)
endsnippet

snippet frozen_string_literal "" b
# frozen_string_literal: true
endsnippet

snippet enum_for "define a enumerator method" b
def ${1:each}($2)
	return enum_for(__method__${2/.*/, /}$2) unless block_given?
	$0
end
endsnippet

snippet before "rspec before each"
before(:${1:each}) do
	$0
end
endsnippet

snippet safe_lazy "safe lazy init property" b
def $1
	return @$1 if defined?(@$1)
	${3:@mutex}.synchronize do
		return @$1 if defined?(@$1)

		@$1 = $2
		define_singleton_method(:$1) { @$1 }
		return @$1
	end
end
endsnippet

snippet patch_stderr "hook stderr for check problem"
$patch_stderr ||= begin
                    old = $stderr
                    require 'delegate'
                    new = SimpleDelegator.new(old)
                    def new.write(*a)
                      binding.pry if a.any? { |v| v.include? 'undefined method' }
                      __getobj__.write(*a)
                    end
                    def new.puts(*a)
                      binding.pry if a.any? { |v| v.to_s.include? 'undefined method' }
                      __getobj__.puts(*a)
                    end
                    $stderr = new
                  end
endsnippet

extends color
