snippet #! "#! header " b
#!/usr/bin/env ruby

$0
endsnippet

snippet seperator "seperator description" b
########## $0
endsnippet

snippet --- "seperator description" b
########## $0
endsnippet

snippet fixme "fixme" b
# FIXME: $0
endsnippet

snippet r "require" b
require '$0'
endsnippet

snippet if "if statement"
if $1
	$0
end
endsnippet

# ruby uggly elseif statement
snippet elseif "else if statement"
elsif $1
	$0
endsnippet

snippet unless "unless statement"
unless $1
	$0
end
endsnippet

snippet case "case statement"
case $1
when $2 then $3
else $0
end
endsnippet

snippet for "for loop"
for ${1:i} in ${2:0...9} do
	$0
end
endsnippet

snippet do "do end block"
do
	$0
end
endsnippet

snippet do/ "do |param| end block" A
do |${1:v}|
	$0
end
endsnippet

snippet & "&method(:$1)" i
&method(:$0)
endsnippet

snippet { "{} block"
{ |${1:v}| $0 
endsnippet

snippet l "lambda"
lambda do
	$0
end
endsnippet

snippet > "one line lambda"
->($1) { $0 }
endsnippet

snippet ar "attr_reader" b
attr_reader
endsnippet

snippet a "attr_accessor" b
attr_accessor
endsnippet

snippet b "breakpoint" b
binding.pry
endsnippet

snippet << "<< here doc"
<<~${1:EOF}
	$0
$1
endsnippet

snippet rubocop "disable rubocop rules" b
# rubocop:disable ${1:all}
$0${VISUAL}
# rubocop:enable $1
endsnippet

snippet rubocop-this "disable rubocop rules"
# rubocop:disable ${1:all}
endsnippet

########## functional ##########

######################################## rspec
snippet describe "describe a spec" b
RSpec.describe $1 do
	$0
end
endsnippet

snippet it "it example" b
it '$1' do
	$0
end
endsnippet

snippet expect "expect assert" b
expect($1).to ${2:eq} $3
endsnippet

snippet context "context group" b
context '$1' do
	$0
end
endsnippet

######################################## solargraph
snippet ## "document template" b
# ${1:description}
#
# @return [${2:String}]
endsnippet

snippet param "param document"
@param ${1:name} [${2:String}]$0
endsnippet

snippet attr_doc "attribute document"
# @!attribute [rw] ${1:name}
#   @return [${2:String}] ${3:desc}
endsnippet

snippet method_doc "method annotation" b
# @!method $1
#  @return [$0]
endsnippet

snippet hint "type hint for following var" b
# @type [${1:String}]
endsnippet

snippet parse "parse directive" b
# @!parse
#  $0
endsnippet

snippet domain "domain modify" b
# @!domain ${1:Object}
endsnippet

snippet nocov "simplecov: no cov hint" b
# :nocov:
${VISUAL}$0
# :nocov:
endsnippet

snippet struct "simple struct declare" b
class ${1:StructName}
	attr_accessor $2
	def initialize(**options)
		options.each do |k, v|
			instance_variable_set("@#{k}", v)
		end
	end
end

endsnippet

########## Sorbet ##########
snippet # "file header" b
# typed: true
# frozen_string_literal: true

endsnippet

snippet et "extend T::Sig" b
extend T::Sig
endsnippet

snippet s "sig annotation" b
sig { ${1:params($2).}returns(${3:T.untyped}) }
endsnippet

snippet t "T.untyped"
T.untyped
endsnippet

########## Misc ##########
snippet do-while "a do while block"
loop do
	$0
	break unless $1
end
endsnippet

snippet catch "catch throw label" b
catch :${1:done} do
	$0
end
endsnippet

snippet begin "a new begin block"
begin
	$0
end
endsnippet

snippet try "a begin rescue block"
begin
	$0
rescue ${1:TYPE} => ${2:localname}
end
endsnippet

snippet help_desc "generate help desc" b
if ARGV.empty? or ARGV.any?(&['-h', '--help', 'help'].method(:include?))
	print <<~EOF
	  usage:
	    #{$0} swiftfile[,swiftfile]*
	    #{$0} -f swiftfilelist
	EOF
	exit 0
end
endsnippet
