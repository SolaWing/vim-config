########## Syntax ##########
snippet f "function"
function $1($2) {
	$0
}
endsnippet
snippet iife "immediately invoke function expression" b
;(function ($1) {
	$0
})($1)
endsnippet

snippet v "var declare"
let $1 = $2
endsnippet

snippet c "const declare" b
const $1 = $2
endsnippet

snippet arg "arguments"
arguments
endsnippet

snippet dowhile "do while loop" b
do {
	${VISUAL}$0
} while ($1)
endsnippet

snippet while "while loop" b
while ($1) {
	${VISUAL}$0
}
endsnippet

snippet foreach "for property" b
for (let ${2:key} in ${1:dict}) {
	${VISUAL}$0
}
endsnippet
snippet foritem "for item in array" b
for (let ${2:item} of ${1:iter}) {
	${VISUAL}$0
}
endsnippet

snippet if "if statement" b
if ($1) {
	${VISUAL}$0
}
endsnippet
snippet eif "else if statement"
else if ($1) {
	${VISUAL}$0
}
endsnippet
snippet else "else"
else {
	${VISUAL}$0
}
endsnippet

snippet class "class creation" b
class ${1:name}${2/.+/ extends /}${2:superclass} {
	constructor() {
		$0
	}
}
endsnippet
snippet import "import module" b
import ${1:defaultExport} from "${2:url}"
endsnippet

snippet /** "docment comment" b
/** $0 */
endsnippet
#################### lint
snippet export "exported" b
/* exported ${0:var} */
endsnippet

snippet eslint "eslint rules configuration" b
/* eslint ${1:name}:"off" */
endsnippet
snippet eslint-disable "eslint scope disable" b
/* eslint-disable $1*/
${VISUAL}$0
/* eslint-enable $1*/
endsnippet
snippet eslint-disable-line "eslint disable line"
// eslint-disable-$1${1/^n$/ext-/}line
endsnippet

#################### Function
snippet log "console.log()" b
console.log($0)
endsnippet

snippet #! "#!osascript" b
#!/usr/bin/env osascript -l JavaScript

function run(argv) {
	$0
}
endsnippet

snippet instanceof "instanceof"
$1 instanceof $2
endsnippet

# functional
snippet map "map element"
$1.map( ${2:function (${3:item, idx}) \{
	return $0
\}})
endsnippet
snippet filter "filter element"
$1.filter( ${2:function (${3:item, idx}) \{
	return $0
\}})
endsnippet
snippet every "do every element. return false to break"
$1.every( ${2:function (${3:item, idx}) \{
	return $0
\}})
endsnippet
snippet reduce "do reduce element. return false to break"
$1.reduce( ${2:function (${4:sum, item, idx}) \{
	return $0
\}}, ${3:[]})
endsnippet

snippet getclass "get class" w
getElementsByClassName($1)
endsnippet
snippet gettag "get tag" w
getElementsByTagName($1)
endsnippet
snippet getid "get id" w
getElementById($1)
endsnippet

snippet try "try catch" b
try {
	$1
} catch (error) {
	$0
}
endsnippet

snippet typeof "typeof operator"
typeof $0
endsnippet

snippet ? "exist check"
typeof $1 !== "undefined" && $1 !== null
endsnippet

snippet property "property declare"
Object.defineProperty($1, "${2:name}", {
	$0
})
endsnippet

snippet stringify "json stringify"
JSON.stringify(${VISUAL}$1)
endsnippet

########## eslint ##########
snippet global "global declare" b
/* global $1 */
endsnippet

########## tsserver annotation(jsdoc) ##########
snippet type "@type hint" b
/** @type {$1} */
endsnippet

snippet param "@param hint"
@param $1 {$2}
endsnippet
