snippet f "function"
function${1/.+/ /}$1($2) {
	$0
}
endsnippet

snippet a "arguments"
arguments
endsnippet

snippet dowhile "do while loop" b
do {
	${VISUAL}$0
} while ($1);
endsnippet

snippet while "while loop" b
while ($1) {
	${VISUAL}$0
}
endsnippet

snippet foreach "for property" b
for (var ${2:key} in ${1:container}) {
	${VISUAL}$0
}
endsnippet
snippet foritem "for item in array" b
for (var $1_idx = 0, $1_len = $2.length; $1_idx < $1_len; ++$1_idx) {
	var ${1:item} = ${2:array}[$1_idx];
	${VISUAL}$0
}
endsnippet

snippet if "if statement" b
if ($1) {
	${VISUAL}$0
}
endsnippet
snippet eif "else if statement"
else if ($1) {
	${VISUAL}$0
}
endsnippet
snippet else "else"
else {
	${VISUAL}$0
}
endsnippet

snippet log "console.log()" b
console.log($0)
endsnippet

snippet #! "#!osascript" b
#!/usr/bin/env osascript -l JavaScript

function run(argv) {
	$0
}
endsnippet

snippet instanceof "instanceof"
$1 instanceof $2
endsnippet

# functional
snippet map "map element"
$1.map( ${2:function (${3:item, idx}) \{
	return $0
\}})
endsnippet
snippet filter "filter element"
$1.filter( ${2:function (${3:item, idx}) \{
	return $0
\}})
endsnippet
snippet every "do every element. return false to break"
$1.every( ${2:function (${3:item, idx}) \{
	return $0
\}})
endsnippet
snippet reduce "do reduce element. return false to break"
$1.reduce( ${2:function (${4:sum, item, idx}) \{
	return $0
\}}, ${3:[]})
endsnippet

snippet getclass "get class" w
getElementsByClassName($1)
endsnippet
snippet gettag "get tag" w
getElementsByTagName($1)
endsnippet
snippet getid "get id" w
getElementById($1)
endsnippet

snippet try "try catch" b
try {
	$1
} catch (error) {
	$0
}
endsnippet

snippet typeof "typeof operator"
typeof $0
endsnippet

snippet ? "exist check"
typeof $1 !== "undefined" && $1 !== null
endsnippet

snippet property "property declare"
Object.defineProperty($1, "${2:name}", {
	$0
})
endsnippet

snippet stringify "json stringify"
JSON.stringify(${VISUAL}$1);
endsnippet
