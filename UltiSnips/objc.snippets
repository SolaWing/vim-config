priority -50

extends c

priority 0

clearsnippets array dict forarray objacc

snippet has_include "#if __has_include()" b
#if __has_include(${1:<$2/$3>})
#import $1
#else
#import "${1/.*?\/(.*?)>/$1/}"
#endif
endsnippet

snippet cl "closure define" b
$2(^__unsafe_unretained ${3:block})($1) = ^${2:void}(${1}) {
	${VISUAL}$0
};
endsnippet

snippet fori "for int loop (fori)"
for (${4:NSUInteger} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet sel "selector" w
@selector($1)
endsnippet

snippet autoreleasepool "autoreleasepool" b
@autoreleasepool {
	$0
}
endsnippet

snippet sync "@synchronized block" b
@synchronized(${1:self}){
	$0
}
endsnippet

snippet fs "format string" w
[NSString stringWithFormat:${1:${VISUAL:@""}}, $3]
endsnippet

snippet kindclass "kindclass" w
[${1:obj} isKindOfClass:[${2:cls} class]]
endsnippet

snippet prop "a @property" b
@property (${1:nonatomic}${2/^.+$/, /}${2:strong}) ${3:NSString*} ${4:varName};
endsnippet

snippet singleton "objc singleton" b
+ (instancetype)${1:sharedInstance} {
	static dispatch_once_t once;
	static ${2:id} instance;
	dispatch_once(&once,^{
		instance = [[self alloc] ${3:init}];$0
	});
	return instance;
}
endsnippet

snippet protocol "protocol define" b
@protocol ${1:protocolName} <${2:NSObject}>

$0

@end
endsnippet

post_jump "if snip.tabstop == 3: vim.vars['oc_interface_name']=snip.tabstops[1].current_text; vim.vars['oc_category_name']=snip.tabstops[2].current_text;"
snippet interface-category "objc interface-category" b
@interface ${1:className} ($2)${3/^.+$/ </}${3:protocol}${3/^.+$/>/}
$0
@end
endsnippet

post_jump "if snip.tabstop == 2: vim.vars['oc_interface_name']=snip.tabstops[1].current_text;"
snippet interface "objc interface" b
@interface ${1:className} : ${2:NSObject}${3/^.+$/ </}${3:protocol}${3/^.+$/>/}
$0
@end
endsnippet

snippet implementation "objc implementation" b
@implementation ${1:`!p snip.rv = vim.vars.get('oc_interface_name', 'className')`}
$0
@end
endsnippet


snippet implementation-category "objc implementation-category" b
@implementation ${1:`!p snip.rv = vim.vars.get('oc_interface_name', 'className')`} (${2:`!p snip.rv = vim.vars.get('oc_category_name', "")`})
$0
@end
endsnippet

snippet foreach "objc fast enumeration" b
for (${1:id} ${2:element} in ${3:container}){
	${VISUAL}$0
}
endsnippet

snippet img "get image by name" w
[UIImage imageNamed:${2:@"${1:name}.png"}]
endsnippet

snippet dc "DYNAMIC_CAST" w
DYNAMIC_CAST(${2:${VISUAL:obj}}, ${1:cls})
endsnippet

snippet dcv "DYNAMIC_CAST var" b
$1* ${3:name} = DYNAMIC_CAST(${2:${VISUAL:obj}}, ${1:cls});
endsnippet

snippet weakify "weakify macro" b
WEAKIFY(${1:self});
endsnippet

snippet strongify "strongify macro" b
STRONGIFY(${1:self});
endsnippet

snippet strongify_or_ret "strongify or ret macro " b
STRONGIFY_OR_RET(${1:self});
endsnippet

snippet weakvar "weak ref var declare" b
__weak typeof(${1:self}) ${2:weak_$1} = $1;
endsnippet

snippet strongvar "strong ref var declare" b
__strong typeof(${2:weak_$1}) ${1:self} = $2;
endsnippet

snippet strongvar_or_ret "strong ref var declare, if not exist, return" b
__strong typeof(${2:weak_$1}) ${1:self} = $2;
if (!$1) return;
endsnippet

snippet mark "#pragma mark -" b
#pragma mark - $1
endsnippet

snippet dispatch_once "dispatch_once block" b
static dispatch_once_t once;
dispatch_once(&once, ^{
	${VISUAL}$0
});
endsnippet

snippet dispatch_async "dispatch_async" b
dispatch_async(${1:dispatch_get_main_queue()}, ${2:^\{
	${VISUAL}$3
\}});
endsnippet

snippet dispatch_after "dispatch_after" b
dispatch_after(dispatch_time(DISPATCH_TIME_NOW, ${1:3}* NSEC_PER_SEC),
	dispatch_get_main_queue(), ${2:^\{
	${VISUAL}$3
\}});
endsnippet

snippet c4f "RGB Color"
[UIColor colorWithRed:$1 green:$2 blue:$3 alpha:${4:1}]
endsnippet
snippet c4b "RGB Color"
[UIColor colorWithRed:$1/255.0 green:$2/255.0 blue:$3/255.0 alpha:${4:1}]
endsnippet

snippet c2f "grey color"
[UIColor colorWithWhite:$1 alpha:${2:1}];
endsnippet

snippet visualLayout "constraintsWithVisualFormat"
[NSLayoutConstraint constraintsWithVisualFormat:
${0:@""}
options:${1:0} metrics:${2:nil} views:${3:views}]
endsnippet

snippet dispatch_timer "a dispatch_source based timer"
dispatch_source_t timer = dispatch_source_create(
	DISPATCH_SOURCE_TYPE_TIMER, 0, 0, ${1:dispatch_get_main_queue()});
if (timer) {
	int64_t interval = NSEC_PER_SEC * ${2:1ull};
	dispatch_source_set_timer( timer,
		dispatch_time(DISPATCH_TIME_NOW, ${3:interval}),
		interval, ${4:interval});
	dispatch_source_set_event_handler(timer, ${5:^\{\}});
	dispatch_resume(timer);
}
endsnippet

snippet nsenum "NS_Enum typedef" b
typedef NS_ENUM(NSInteger, ${1:name}) {
	$0
};
endsnippet

snippet font "ios system font" w
[UIFont systemFontOfSize:$1]
endsnippet

snippet boldfont "ios system bold font" w
[UIFont boldSystemFontOfSize:$1]
endsnippet

snippet ^ "generate default block with args use in previewwindow" i
^${1:`!p
if not snip.c:
  def getBlockArg():
    previewContent = None
    for w in vim.current.tabpage.windows:
      if w.options['previewwindow']:
        previewContent = "\n".join(w.buffer)
        break
    if not previewContent: return ""

    startpos = 0;
    prefix = vim.current.line[:vim.current.window.cursor[1]]
    m = re.search(r'\w+:[^:]*$', prefix) # have expand word
    if m:
      prefix = m.group(0); prefix = prefix[:prefix.rfind(':')+1]
      i = previewContent.find(prefix)
      if i > 0: startpos = i + len(prefix)

    #print previewContent, startpos
    m = re.compile(r'\^([\w\s*]*\([^)]*\))').search(previewContent, startpos)
    if m: return m.group(1)
    return ""
  snip.rv = getBlockArg()
`}{
	$0
}
endsnippet

snippet tableViewDefaultDelegate "tableViewDefaultDelegate" b
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {return 1;}
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
	return 0;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
	return 0;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
#define CellIdentifier @"cell"
	UITableViewCell* cell =
		[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
	if (!cell){
		cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault
		                              reuseIdentifier:CellIdentifier];
	}
	return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
	
}
endsnippet

snippet view-init "view init declare" b
- (instancetype)initWithFrame:(CGRect)frame {
	self = [super initWithFrame:frame];
	if (self){ [self initilize]; }
	return self;
}

- (void)initilize {
	// need to prevent run more than once!
}

endsnippet

snippet setter "a default setter" b
- (void)set${1/\w+/\u$0/}:(${2:id})${1:name} {
	if ($1 != _$1) {
		_$1 = $1;$0
	}
}
endsnippet

snippet lock "custom lock macro" b
Lock();
${VISUAL}$0
Unlock();
endsnippet

snippet defineLock "custom define lock macro" b
#define Lock() dispatch_semaphore_wait(${1:_lock}, DISPATCH_TIME_FOREVER)
#define Unlock() dispatch_semaphore_signal($1)
endsnippet

snippet nsproxy "nsproxy definition" b
@interface ${1:ProxyName} : NSProxy

@property (nonatomic, strong) ${2:id} ${3:target};

+ (instancetype)newWithTarget:($2)$3;

@end

@implementation $1

+ (instancetype)newWithTarget:($2)$3 {
	$1* ret = [self alloc];
	ret->_$3 = $3;
	return ret;
}

- (id)forwardingTargetForSelector:(SEL)selector {
	return _$3;
}

- (void)forwardInvocation:(nonnull NSInvocation *)invocation {
	invocation.$3 = _$3;
	return [invocation invoke];
}

- (nullable NSMethodSignature *)methodSignatureForSelector:(nonnull SEL)sel {
	return [_$3 methodSignatureForSelector:sel];
}

- (BOOL)respondsToSelector:(SEL)aSelector {
	return [_$3 respondsToSelector:aSelector];
}

@end

endsnippet

snippet kvc "kvc interface and implementation" b
#pragma mark - KVC interface array accessors for ${1:key}
- (NSUInteger)countOf${1/^\w/\u$0/};
- (${2:id})objectIn${1/^\w/\u$0/}AtIndex:(NSUInteger)index;
- (void)get${1/^\w/\u$0/}:(${2:id} __unsafe_unretained [])buffer range:(NSRange)range;

#pragma mark Mutable accessors for $1
- (void)insertObject:($2)object in${1/^\w/\u$0/}AtIndex:(NSUInteger)index;
- (void)insert${1/^\w/\u$0/}:(NSArray *)array atIndexes:(NSIndexSet *)indexes;
- (void)removeObjectFrom${1/^\w/\u$0/}AtIndex:(NSUInteger)index;
- (void)remove${1/^\w/\u$0/}AtIndexes:(NSIndexSet *)indexes;
- (void)replaceObjectIn${1/^\w/\u$0/}AtIndex:(NSUInteger)index withObject:($2)object;
- (void)replace${1/^\w/\u$0/}AtIndexes:(NSIndexSet *)indexes with${1/^\w/\u$0/}:(NSArray *)array;

- (void)add${1/^\w/\u$0/}:(NSArray*)array;
- (void)addObjectTo${1/^\w/\u$0/}:($2)object;
#pragma mark end $1
#pragma mark -

#pragma mark - KVC array accessors for $1
- (NSUInteger)countOf${1/^\w/\u$0/} { return _$1.count; }
- ($2)objectIn${1/^\w/\u$0/}AtIndex:(NSUInteger)index { return _$1[index]; }
- (void)get${1/^\w/\u$0/}:($2 __unsafe_unretained [])buffer range:(NSRange)range {
	[_$1 getObjects:buffer range:range];
}

#pragma mark Mutable accessors for $1
- (void)insertObject:($2)object in${1/^\w/\u$0/}AtIndex:(NSUInteger)index {
	[_$1 insertObject:object atIndex:index];
}

- (void)insert${1/^\w/\u$0/}:(NSArray *)array atIndexes:(NSIndexSet *)indexes {
	[_$1 insertObjects:array atIndexes:indexes];
}

- (void)removeObjectFrom${1/^\w/\u$0/}AtIndex:(NSUInteger)index {
	[_$1 removeObjectAtIndex:index];
}

- (void)remove${1/^\w/\u$0/}AtIndexes:(NSIndexSet *)indexes {
	[_$1 removeObjectsAtIndexes:indexes];
}

- (void)replaceObjectIn${1/^\w/\u$0/}AtIndex:(NSUInteger)index withObject:($2)object {
	[_$1 replaceObjectAtIndex:index withObject:object];
}

- (void)replace${1/^\w/\u$0/}AtIndexes:(NSIndexSet *)indexes with${1/^\w/\u$0/}:(NSArray *)array {
	[_$1 replaceObjectsAtIndexes:indexes withObjects:array];
}


- (void)add${1/^\w/\u$0/}:(NSArray*)array {
	[self insert${1/^\w/\u$0/}:array atIndexes:[NSIndexSet indexSetWithIndexesInRange:NSMakeRange(_$1.count, array.count)]];
}
- (void)addObjectTo${1/^\w/\u$0/}:($2)object {
	[self insertObject:object in${1/^\w/\u$0/}AtIndex:_$1.count];
}

endsnippet

snippet impAssociateProperty "default implementation for property use associative value backend" b
- (${1:id})${2:name} {
	return objc_getAssociatedObject(self, @selector($2));
}

- (void)set${2/\w/\u$0/}:($1)$2 {
	objc_setAssociatedObject(self, @selector($2), $2, ${3:OBJC_ASSOCIATION_RETAIN_NONATOMIC});
}
endsnippet

snippet init-method "default init method" b
- (instancetype)${1:init} {
	if (self = [super ${1/\([^)]*\)//g}]) {
		$0
	}
	return self;
}
endsnippet

snippet new "new a object and set to a variable" b
${3:${1/\w*/$0*/}} ${4:obj} = [${1:UIView} ${2:new}];
endsnippet

snippet endBackgroundTask "endBackgroundTask helper method" b
static void endBackgroundTask(UIBackgroundTaskIdentifier *bid) {
	if (*bid != UIBackgroundTaskInvalid) {
		[[UIApplication sharedApplication] endBackgroundTask:*bid];
		*bid = UIBackgroundTaskInvalid;
	}
}
endsnippet

snippet unreachable "assert unreachable" b
NSAssert(false, @"${1:unreachable code!!}");
endsnippet

snippet assertMain "assert main thread" b
NSParameterAssert( [NSThread isMainThread] );
endsnippet

snippet paramassert_or_ret "NSParameterAssert or ret" b
NSParameterAssert( $1 );
if (!$1) { return; }
endsnippet

snippet mrfindalls "MagicRecord findall" b
NSArray<$1 *> *${0:items} = [$1 MR_findAllSortedBy:@"$2"
	ascending:${3:YES} withPredicate:[NSPredicate predicateWithFormat:@"$4"]
	inContext:${5:moc}];
endsnippet

snippet mrfindall "MagicRecord findall" b
NSArray<$1 *> *${0:items} = [$1 MR_findAllWithPredicate:[NSPredicate
	predicateWithFormat:@"$4"]
	inContext:${5:moc}];
endsnippet

snippet defer "my extension Defer syntax" b
Defer = ^{ $0 };
endsnippet
snippet d "my extension Defer syntax" b
Defer = ^{ $0 };
endsnippet

snippet CATransaction "CATransaction declare" b
[CATransaction begin];
[CATransaction setAnimationDuration:${1:0.25}];
[CATransaction setAnimationTimingFunction:[CAMediaTimingFunction functionWithName:${2:kCAMediaTimingFunctionEaseInEaseOut}]];
[CATransaction setCompletionBlock:^(void){$0}];
$3
[CATransaction commit];
endsnippet
